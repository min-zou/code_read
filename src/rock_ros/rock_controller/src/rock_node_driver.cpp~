#include "ros/ros.h"
#include "pingfang_msgs/Drive.h"
#include "pingfang_msgs/Feedback.h"

#include "rock_serial.h"
#include "driver.h"
#include <stdint.h>


void callback(const pingfang_msgs::Drive::ConstPtr& msg,rock_driver rockdriver)
{
    int left_command = msg->drivers[0];
    int right_command = msg->drivers[1]; 
    rockdriver.sendcmd(left_command, right_command);
}




int main(int argc, char * argv[])
{
    ros::init(argc, argv, "rock_driver_node");
    std::string serial_port;
    int serial_baudrate = 115200;
    int rate;
    int ticks_round;
    rock_driver rockdriver;

    ros::NodeHandle nh;
    ros::NodeHandle nh_private("~");
    nh_private.param<std::string>("serial_port",serial_port,"/dev/ttyUSB0");
    nh_private.param<int>("serial_baudrate", serial_baudrate, 115200); 
    nh_private.param<int>("rate",rate,10);
    nh_private.param<int>("ticks_round",ticks_round,5200);
    ros::Rate loop_rate(rate);

    ros::Publisher feedback_pub = nh.advertise<pingfang_msgs::Feedback>("feedback",1);
    ros::Subscriber cmd_sub =  nh.subscribe("cmd_drive", 1, callback(rockdriver));

    if(rockdriver.connect(serial_port.c_str(), (uint32_t)serial_baudrate) == -1)
	{
	    fprintf(stderr, "Error, cannot bind to the specified serial port %s.\n", serial_port.c_str());
	    return -1;
	}

    ros::Time time_now = ros::Time::now();
    ros::Time time_then;
    double cal_duration;
     
    while(ros::ok())
    {
        pingfang_msgs::Feedback feedback_msg;
        time_then =ros::Time::now();
        int32_t *encbuffer;
       if(rockdriver.getenc(encbuffer) == -1)
		{
		    ROS_INFO("con't get the encode date.");
                    return -1;
		}
        int32_t left_enc = *encbuffer;
        int32_t right_enc = *(encbuffer+1);
        cal_duration = (time_then -time_now).toSec()*1e-3;
        time_now = time_then;
	
        feedback_msg.drivers[0].measured_travel = left_enc/ticks_round;
	feedback_msg.drivers[1].measured_travel = right_enc/ticks_round;
	feedback_msg.drivers[0].measured_velocity = left_enc/(ticks_round * cal_duration);
        feedback_msg.drivers[1].measured_velocity = right_enc/(ticks_round * cal_duration);
	feedback_msg.pcb_temperature =30;
	feedback_msg.mcu_temperature =30;
        feedback_pub.publish(feedback_msg);
	ros::spinOnce();
	loop_rate.sleep();
    }

    rockdriver.disconnect();
    return 0;
}
